<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>freeseamew`s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://freeseamew.github.io/"/>
  <updated>2017-07-03T14:07:25.000Z</updated>
  <id>http://freeseamew.github.io/</id>
  
  <author>
    <name>freeseamew</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Meteor custom account 강좌 2</title>
    <link href="http://freeseamew.github.io/2017/07/03/meteor-account-tutorial-2/"/>
    <id>http://freeseamew.github.io/2017/07/03/meteor-account-tutorial-2/</id>
    <published>2017-07-03T13:55:18.000Z</published>
    <updated>2017-07-03T14:07:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4-회원가입-기본"><a href="#4-회원가입-기본" class="headerlink" title="4. 회원가입 기본"></a>4. 회원가입 기본</h3><p>저번 강좌를 통해 기본적인 페이지 디자인과 페이지 이동(routing) 관련 기능은 완성했습니다. 그럼 이제 본격적으로 meteor와 관련된 기능들을 작성해 보도록 하겠습니다. 일단 Account에서 가장 기본이 되는 회원 가입부터 만들어 보도록 하겠습니다. </p>
<p>회원가입은 다음과 같이 몇가지 시나리오를 두고 진행하도록 하겠습니다. </p>
<blockquote>
<p>1단계: 가장 기본적인 과정입니다.  client페이지에서 가입정보를 폼으로 받고, 서버로 부터 회원가입 요청 후 가입완료 되는 형태의 진행이 되겠습니다.<br>2단계: 유효성검사(validate) 추가<br>3단계: 이메일 인증 </p>
</blockquote>
<hr>
<h4 id="4-1-기본-회원-가입"><a href="#4-1-기본-회원-가입" class="headerlink" title="4.1 기본 회원 가입"></a>4.1 기본 회원 가입</h4><p>우선 register.js 를 열고 아래 소스를 입력해 줍니다. </p>
<p><code>client/register.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Template.register.events(&#123;</div><div class="line">  &apos;click button[name=btn-register]&apos; (evt, tmpl)</div><div class="line">  &#123;</div><div class="line">    evt.preventDefault(); //새로 고침 방지</div><div class="line"></div><div class="line">    var inputUsername = tmpl.find(&apos;input[name=user-email]&apos;).value;</div><div class="line">    var inputEmail= tmpl.find(&apos;input[name=user-email]&apos;).value;</div><div class="line">    var inputPassword = tmpl.find(&apos;input[name=user-password]&apos;).value;</div><div class="line">    var inputPasswordAgain =  tmpl.find(&apos;input[name=user-passwordAgain]&apos;).value;</div><div class="line">    var inputFirstName = tmpl.find(&apos;input[name=user-firstName]&apos;).value;</div><div class="line">    var inputLastName = tmpl.find(&apos;input[name=user-lastName]&apos;).value;</div><div class="line"></div><div class="line"></div><div class="line">    var inputUser = &#123;</div><div class="line">      username: inputUsername,</div><div class="line">      email: inputEmail,</div><div class="line">      password: inputPassword,</div><div class="line">      passwordAgain: inputPasswordAgain,</div><div class="line">      profile: &#123;</div><div class="line">        firstName: inputFirstName,</div><div class="line">        lastName: inputLastName</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    //서버로의 로그인 호출</div><div class="line">    Meteor.call(&apos;register&apos;, inputUser, function (err)</div><div class="line">    &#123;</div><div class="line">      if(!err)</div><div class="line">      &#123;</div><div class="line">        Bert.alert( &apos;가입에 성공했습니다. 가입한 메일로 인증을 받아주세요&apos; , &apos;danger&apos;, &apos;growl-top-right&apos; );</div><div class="line">        FlowRouter.go(&apos;/login&apos;);</div><div class="line">      &#125;</div><div class="line">      else</div><div class="line">      &#123;</div><div class="line">        Bert.alert( err.message , &apos;danger&apos;, &apos;growl-top-right&apos; );</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>기본적으로 템플릿의 요소를 가지고 이벤트(마우스 click, over 등)를 일으키는 방법은 <code>Template.템플릿이름.event({})</code> 이 같은 문법을 사용합니다. 그리고  <code>click button[name=btn-register]&#39; (evt, tmpl)</code> 이 부분은 name=btn-register라는 선택자에 click 이벤트가 발생 했을 때 어떤 처리를 할 것인가에 대한 스크립트가 되겠습니다. 여기서 evt, tmpl 이라는 2가지 파라미터를 갖게 되는데요. evt는 위의 소스로 예를 들자면 실제 클릭이 일어난 버튼의 액션 되고, tmpl은 해당 이벤트가 일어나는 템플릿 정보로 tmpl을 이용하여 사용한 템플릿의 정보(ex: input 값)를 받아올 수 있습니다.  </p>
<p>이를 바탕으로 아래와 같이 input 정보를 변수에 담을 수 있습니다. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var inputUsername = tmpl.find(&apos;input[name=user-email]&apos;).value;</div></pre></td></tr></table></figure>
<p><code>var inputUser</code>의 경우 내용은 아래와 같은 의미를 갖는데, 여기서 중요한 점은 username, email, password 는 meteor account의 기본 저장 형태이므로 꼭 이런 식으로 이름을 정하면 되고 기타 정보들은 profile아래에 사용자가 커스텀하게 원하는 정보를 입력해 둘 수 있습니다. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var inputUser = &#123;</div><div class="line">  username: inputUsername,  // 유저이름</div><div class="line">  email: inputEmail,  // 유저 이메일</div><div class="line">  password: inputPassword, // 비밀번호(db에 저장될 대 암호화 됨)</div><div class="line">  passwordAgain: inputPasswordAgain, // 비밀번호 확인</div><div class="line">  profile: &#123; // 위의 정보 이외의 정보는 profile에 저장하면 된다. </div><div class="line">    firstName: inputFirstName,</div><div class="line">    lastName: inputLastName</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>마지막으로 <code>Meteor.call(&#39;register&#39;, inputUser, function (err) {})</code> 는 register라는 메소드를 호출해 실제 회원정보를 데이터베이스에 넣는 작업을 하게 됩니다. </p>
<p>참고로 meteors는 아래와 같이 method를 만들고, 이를 <code>Meteor.call(&#39;메소드 이름&#39;)</code> 이와 같은 방법으로 호출해서 사용할 수 있습니다. </p>
<ul>
<li><code>method 생성</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Meteor.methods(&#123;</div><div class="line"></div><div class="line">  method이름: function(data) </div><div class="line">  &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>만들어진 method는 아래와 같은 방법으로 불러와 사용할 수 있습니다. </p>
<ul>
<li><code>method 호출</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Meteor.call(&apos;method이름&apos;, 넘겨줄객체묶음, function (err) &#123;</div><div class="line">  if(!err)</div><div class="line">  &#123;</div><div class="line">    // 성공  </div><div class="line">  &#125;</div><div class="line">  else</div><div class="line">  &#123;</div><div class="line">    // 실패</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>이제 위에 register.js 에서 호출하는 메서드 <code>register</code>를 아래와 같이 만들어 작성해 주세요. 참고로 해당 메소드는 server폴더 아래의 accounts.js에서 작성이 되며, 실제로도 서버에서 실행이 되는 코드가 되겠습니다. </p>
<p><code>server/accounts.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Meteor.methods(&#123;</div><div class="line"></div><div class="line">  register: function(inputUser) // 서버측에서 회원가입 실행시 사용됨.</div><div class="line">  &#123;</div><div class="line">    var userEmail = inputUser.email;</div><div class="line">    var userPassword = inputUser.password;</div><div class="line">    var userPasswordAgain = inputUser.passwordAgain;</div><div class="line">    var userFirstName = inputUser.profile.firstName;</div><div class="line">    var userLastName = inputUser.profile.lastName;</div><div class="line">    </div><div class="line">    </div><div class="line">    // 회원가입 시작</div><div class="line">    try</div><div class="line">    &#123;</div><div class="line">      Accounts.createUser(&#123;</div><div class="line">        username: userEmail,</div><div class="line">        email: userEmail,</div><div class="line">        password: userPassword,</div><div class="line">        profile: &#123;</div><div class="line">          serviceType: &apos;site&apos;,</div><div class="line">          firstName: userFirstName,</div><div class="line">          lastName: userLastName,</div><div class="line">          gender: &apos;&apos;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    catch (err)</div><div class="line">    &#123;</div><div class="line">      throw err;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>그리고 이제 회원가입을 위해 아래의 패키지를 설치해 주시면 되겠습니다. </p>
<blockquote>
<p>설치 패키지</p>
<ul>
<li>meteor add accounts-password</li>
</ul>
</blockquote>
<p>이제 <code>http://localhost:3000/register</code> 페이지로 가서 오류 없이 회원 가입이 완료되면, <code>FlowRouter.go(&#39;/&#39;);</code> 이 명령어를 타고, 처음 페이지로 이동하게 됩니다. </p>
<p>여기서 일반 웹개발자라면 당황스러운 부분이 발생할 수 있는데요. 현재까지 우리는 딱히 데이터베이스에 스키마 정의도 하지 않았고, 입력을할 프로시저를 만들거나, 아니면 직접 쿼리를 수동으로 입력하지도 않았지만, 가입이 완료되고 심지어 로그인이 되었다는 것에 믿기 힘들 수도 있습니다. meteor가 생산성 생산성 하는데는 바로 이런 부분에서 알 수 있습니다. ^^</p>
<p>몽고 디비에 접속해 실제 테이블이 생성되었고, 객체가 들어가 있는 것을 보는 방법을 간단히 설명드리겠습니다. meteor를 실행시킨 상태에서 Robomongo라는 몽고디비 클라이언트 툴을 이용해 <code>localhost:3001</code>  로 접속하면 아래와 같이 meteor라는 데이터베이스에 user라는 collection(RDBMS의 테이블에 해당)이 있는 것을 볼 수 있습니다. </p>
<p><img src="https://lh3.googleusercontent.com/7i-lbX36odDbL-6dVILHCSMXfGEgckkkGwCRsV9fkYQ4D1oVXoW3II4R63MPZbV1taQEugdmHwFRkEAMTtvQH55Fl4q_CVA-_NQ0E51IoeDPukJiLebh3JqkRhNVYm3JEwrxM2e5OxoKPAxgD1OCaqg6JIDByJfHvU9mmurkrI1rJSsS8vBIm-j1mDrlb4ShsgoEQzKwkQeS8lJtzG-uJMHcVbat6963P1jd9l8aycSMkEGgtK4kbEpNYjLEF4rUm5p-OYOAl9VbR08OxQR7r23N2J9p5UCRvSUau3QOE-uWkQaPaWTb4lPVIP5hZCFp4h8KG9_k5K6ExFDi4cos5eJ1ib8fOvbjb-ZAeIM927WIorDDnnhOSw7ADPrKuouJgr6Xu6wjGCpwq5YRNYBz2rfo8mO1Nhwa9j7IHlHRqoOXMUloIoB_AL6gqybOZWHPMF0pZgkUpL1DPgwNbEqwYxdLexycqycprD-sGMfZsDsf5MLlWzoLY2RotsMJniaP2Ymkep4VW-j1G71SwtAbjIULpOn1342MNy1xwPocnMzgGdW2eh_Vso2YtsFCPkp5xdzl7_g-XCtpxURGKFJt3pcOm3Xf3MWQaq-fUVRYk_spoQedXuIFvpAsuTfr_pBCz5Y_2q14mpyfSjC7jSZd8BdtY8yBzP2vBtfyQnV-BpQ=w718-h448-no"></p><p style="text-align: center;">[몽고 디비 로그인 부분 증명]</p><p></p>
<p>미티어는 기본적으로 몽고 디비를 사용하고 있는데 이 몽고디비는 nosql 데이터 베이스로 일종의 텍스트 기반의 데이터 베이스가 되겠습니다. 몽고디비는 딱히 스키마 정의를 하지 않고, json형태의 구조를 읽고, 쓰고, 수정하는 방법으로 사용하는 데이터베이스 입니다. 여기서 이부분까지 자세히 설명은 좀 힘들겠지만, <code>Accounts.createUser</code> Meteor에서 이 api를 호출하는 것으로 유저가 저장된다고 일단 이해하시면 되겠습니다. ^^</p>
<hr>
<h4 id="4-2-로그인"><a href="#4-2-로그인" class="headerlink" title="4.2 로그인"></a>4.2 로그인</h4><p>회원가입을 구현했으니 이어서 로그인 및 로그인 정보를 출력하는 부분을 만들어 보도록 하겠습니다.</p>
<p><code>client/login.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Template.login.events(&#123;</div><div class="line">  &apos;click button[name=btn-singIn]&apos; (evt, tmpl)</div><div class="line">  &#123;</div><div class="line">    evt.preventDefault();</div><div class="line"></div><div class="line">    var inputEmail = tmpl.find(&apos;input[name=user-email]&apos;).value;</div><div class="line">    var inputPwd = tmpl.find(&apos;input[name=user-pwasword]&apos;).value;</div><div class="line"></div><div class="line">    Meteor.loginWithPassword(inputEmail, inputPwd, function(err) </div><div class="line">    &#123;</div><div class="line">      if(!err)</div><div class="line">      &#123;</div><div class="line">        FlowRouter.go(&apos;/&apos;);</div><div class="line">      &#125;</div><div class="line">      else</div><div class="line">      &#123;</div><div class="line">        console.log(err);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    return false;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>소스에서 사용된 <code>Meteor.loginWithPassword()</code>는 meteor에서 제공하는 기본 로그인 api 입니다. </p>
<p>다음으로 로그인이 되면 홈화면에서 로그인 정보가 나오도록 첫화면을 바꿔보도록 하겠습니다. </p>
<p><code>client/home.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;template name=&quot;home&quot;&gt;</div><div class="line">  &#123;&#123;#unless loggingIn&#125;&#125;</div><div class="line">    &#123;&#123;#if currentUser&#125;&#125;</div><div class="line">      &#123;&#123;&gt; userInfo&#125;&#125;</div><div class="line">    &#123;&#123;else&#125;&#125;</div><div class="line">      &#123;&#123;&gt; defaultHome&#125;&#125;</div><div class="line">    &#123;&#123;/if&#125;&#125;</div><div class="line">  &#123;&#123;/unless&#125;&#125;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;template name=&quot;defaultHome&quot;&gt;</div><div class="line">  &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-md-12&quot;&gt;</div><div class="line">      &lt;div class=&quot;col-md-12&quot;&gt;</div><div class="line">        &lt;h2&gt;환영합니다.&lt;/h2&gt;</div><div class="line">        &lt;hr/&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;col-md-6&quot;&gt;</div><div class="line">        &lt;a href=&quot;&#123;&#123;pathFor &apos;login&apos;&#125;&#125;&quot; class=&quot;btn btn-primary btn-lg btn-block&quot;&gt;Go Login&lt;/a&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;col-md-6&quot;&gt;</div><div class="line">        &lt;a href=&quot;&#123;&#123;pathFor &apos;register&apos;&#125;&#125;&quot; class=&quot;btn btn-success btn-lg btn-block&quot;&gt;Go Register&lt;/a&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;template name=&quot;userInfo&quot;&gt;</div><div class="line">    &lt;div class=&quot;panel panel-default col-md-6 col-md-offset-3  panel-custom&quot;&gt;</div><div class="line">      &lt;div class=&quot;panel-heading text_center&quot;&gt;</div><div class="line">        &lt;h2&gt;METEOR ACCOUNTS&lt;/h2&gt;</div><div class="line">        &lt;p&gt;가입유저 정보&lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;panel-body panel-body-set&quot;&gt;</div><div class="line"></div><div class="line">        &lt;div class=&quot;col-xs-12 panel-body-inner-box-3&quot;&gt;</div><div class="line">          &lt;p&gt;Email: &#123;&#123;currentUser.username&#125;&#125; &lt;/p&gt;</div><div class="line">          &lt;hr/&gt;</div><div class="line">          &lt;p&gt;First Name: &#123;&#123;currentUser.profile.firstName&#125;&#125; &lt;/p&gt;</div><div class="line">          &lt;hr/&gt;</div><div class="line">          &lt;p&gt;Last Name: &#123;&#123;currentUser.profile.lastName&#125;&#125; &lt;/p&gt;</div><div class="line">          &lt;hr/&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line"></div><div class="line">        &lt;div class=&quot;form-group panel-body-inner bottom-padding&quot;&gt;</div><div class="line">          &lt;button name=&quot;btn-logout&quot; class=&quot;btn btn-danger btn-lg btn-block button&quot;&gt;로그아웃&lt;/button&gt;</div><div class="line">          &lt;a href=&quot;&#123;&#123;pathFor &apos;changePassword&apos;&#125;&#125;&quot; class=&quot;a-right&quot; &gt;비밀번호 변경&lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line"></div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>변경된 home.html 소스를 설명드리도록 하겠습니다.<br>일단 단일 템플릿을 home, defalutHome, userInfo 의 세가지 템플릿으로 분리했습니다.<br><code>#if currentUser</code> 이 부분은 meteor에서 로그인 상태를 확인할 때 사용하는 API입니다. 로그인이 되어있으면 이 조건절을 타고 <code>&gt; userInfo</code> 템플릿을 호출하여 보여주고, 로그 아웃 상태 일 때는 else 조건절을 따라 &gt; defaultHome 을 보여주도록 설정한 소스입니다. </p>
<p>그리고 userInfo 템플릿을 보면 아시겠지만, 로그인 정보는 currentUser객체로 각종 정보를 받아서 표시 할 수 있습니다. </p>
<p>정상적으로 로그인이 되면 첫화면이 다음과 같이 나오게 됩니다. </p>
<p><img src="https://lh3.googleusercontent.com/7YOzghuxYM9s60j7i3nvuP0-iJ646ZQOM3pcaZv3tRtVlajh0Puikz7iR3SK3hP_XN5ZO-LE0vrdYCsLG3hOM2R1SQ_Ed-_DUVMBwsgDpVl05UVfEgUuG6XbtsyMDhjlm3d-HvV3MIrhlAUHq3EsnZlvSDrCmF-MuPX2x7BIsAhuxDvnx5E0tGxOgkX203cyByk4t9JuGWf2R0EXnvD09nhOIyhhQleeB5Q0flv8sTyQC45w-S1IF9AfKjXfMRm6D1SMVNiZ0LXu0o0QfS7UZDtbqoeI1-Rl6q4EVFYvYy-q4f1N9MRZQfCKhfb_GviNkpXppULngziE-6n9rdYQb0me5YKsPx57WUgmnEV8IPPwfnMjkJm6oK6qnMvMUtLg63oyqOiVaWv72fBRrKjCOYulM8Mz7REGGW5MPgS2ILU3RlUQj0_HtEsJFA6LYlx6YR8RX5zOjp1F1OWZ4KW_NjDFGBmP2ogQKKz38XRD1sPZuiJtZEWtcas2nr3quLEGElmBwyJfDqyKbJvvQ3Mgmg-bKTU4K_WUIddaXQ0Lp2-keIuja9kQ4n6SgJldQcMkylmpEDZDiLXPS3Iso2VqqG-9iTrMEY5WyB_GhutJQze-jVUcpgRG0VvfqKMHmw5XcLQwZsG67KaoVgjTW4cAH5epD81UsYtF0e9x341F_8s=w627-h477-no"></p><p style="text-align: center;">[로그인 후 첫화면]</p><p></p>
<p>참고로 여기서 <code>#if currentUser</code> 만 사용해도 되지만 이 소스 앞에   <code>#unless loggingIn</code> 로 감싸준 이유는 페이지가 새로 시작될 때 1초 정도 currentUser가 작동하지 않는 문제가 발생하기 때문입니다. 이 현상 때문에 defaultHome 탬플릿이 아주 잠깐 보이고 userInfo로 가는 잔성 현상이 발생하게 됩니다. 이 잔상 현상을 방지 하기위한 일종의 핵? 이 <code>#unless loggingIn</code> 로 감싸주는 방법입니다. </p>
<hr>
<h4 id="4-3-유효성검사-validate-추가"><a href="#4-3-유효성검사-validate-추가" class="headerlink" title="4.3 유효성검사(validate) 추가"></a>4.3 유효성검사(validate) 추가</h4><p>회원 가입이 되었지만, 아직 부족한 부분이 많습니다. 이제 하나씩 기능을 더해보도록 하겠습니다. 우선은 유효성 검사를 추가해 보도록 하겠습니다. </p>
<p>일단 아래 패키지를 설치해주세요. 해당 패키지는 유효성검사와 직접적인 관계는 없지만, 경고문의 단순히 자바스크립티 alert 문을 쓰면 좀 허접해(?) 보이는 것을 개선하기 위해 사용한 고급진? alert 효과 패키지 라고 보시면 되겠습니다. </p>
<blockquote>
<p>설치 패키지</p>
<ul>
<li>meteor add themeteorchef:bert</li>
</ul>
</blockquote>
<p>bert 패키지의 사용법은 아래와 같이 사용하시면 됩니다. 보시면 상당히 심플한 구조를 가지고 있는 것을 알 수 있는데요. 타입과 출력형태만 메지지의 성격이나 디자인에 맞게 설정해서 바로 사용하시면 됩니다. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bert.alert( &apos;메시지&apos;, &apos;타입(ex: success)&apos;, &apos;출력형태(ex: growl-top-right)&apos; );</div></pre></td></tr></table></figure>
<blockquote>
<p>Bert에 대해 좀 더 자세히 알고 싶은 분은 아래 링크를 참고하세요.<br><a href="https://themeteorchef.com/tutorials/client-side-alerts-with-bert" target="_blank" rel="external">https://themeteorchef.com/tutorials/client-side-alerts-with-bert</a></p>
</blockquote>
<p>다음으로 <code>checkPattern.js</code>파일을 만들고, 아래 소스를 입력하세요.<br>checkPattern.js의 경우 클라이 언트나 서버 모두에서 사용할 경우가 있으므로 lib 폴더에 작성하도록 하겠습니다. 한가지 주의 할 점은 여기의 소스는 꼭 함수명 앞에 var를 써서는 안됩니다. 이부분과 정규식 부분은 잘 비교해서 사용하시면 되겠습니다. </p>
<p><code>lib/checkPattern.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">// 필수 입력사항 체크</div><div class="line">NotEmptyString = function (value)</div><div class="line">&#123;</div><div class="line">  if(value.length &gt; 0)</div><div class="line">  &#123;</div><div class="line">    return true</div><div class="line">  &#125;</div><div class="line">  throw new Meteor.Error(403, &apos;필수 사항을 입력해주세요.&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 이메일 형식 체크 </div><div class="line">isEmail = function (value)</div><div class="line">&#123;</div><div class="line">  var filter = /^([0-9a-zA-Z_\.-]+)@([0-9a-zA-Z_-]+)(\.[0-9a-zA-Z_-]+)&#123;1,2&#125;$/;</div><div class="line">  if(filter.test(value))</div><div class="line">  &#123;</div><div class="line">    return true;</div><div class="line">  &#125;</div><div class="line">  throw new Meteor.Error(403, &apos;이메일 형식이 바르지 않습니다 &apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 패스워드 6자리 이상 체크</div><div class="line">isValidPassword = function (password)</div><div class="line">&#123;</div><div class="line">  if(password.length &gt;= 6)</div><div class="line">  &#123;</div><div class="line">      return true;</div><div class="line">  &#125;</div><div class="line">  throw new Meteor.Error(403, &apos;비밀번호는 6자리 이상이여야 합니다.&apos;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// 패스워드, 패스워드 확인 일치 체크</div><div class="line">isMatchPassword = function (password, passwordAgain)</div><div class="line">&#123;</div><div class="line">  if(password === passwordAgain)</div><div class="line">  &#123;</div><div class="line">    return true;</div><div class="line">  &#125;</div><div class="line">  throw new Meteor.Error(403, &apos;비밀번호와 비밀번호 확인이 다릅니다.&apos;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// 전화번호 : &quot;000-0000-0000&quot;</div><div class="line">isPhone = function(value)</div><div class="line">&#123;</div><div class="line">  var filter = /^\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;$/;</div><div class="line">  if(filter.test(value))</div><div class="line">  &#123;</div><div class="line">    return true;</div><div class="line">  &#125;</div><div class="line">  throw new Meteor.Error(403, &apos;전화번호 형식이 바르지 않습니다 &apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 특정 날짜 형식 : &quot;yyyy/mm/dd&quot;</div><div class="line">isBirthDay = function (value)</div><div class="line">&#123;</div><div class="line">  var filter = /^(19[0-9][0-9]|20\d&#123;2&#125;)\/(0[0-9]|1[0-2])\/(0[1-9]|[1-2][0-9]|3[0-1])$/;</div><div class="line">  if(filter.test(value))</div><div class="line">  &#123;</div><div class="line">    return true;</div><div class="line">  &#125;</div><div class="line">  throw new Meteor.Error(403, &apos;날짜 형식이 바르지 않습니다 &apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위 소스들의 형식은 각각 비슷하다는 것을 금방 알 수 있을 것입니다.  연산자로 넘어온 값을 정규식으로 비교하고 이 값에 오류가 있으면 throw를 통해 오류를 던져주는 구조입니다. </p>
<p>그리고 accounts.js에서 아래 소스를 참고로 추가해주시면 되겠습니다. (회원가입 입력값 검증 부분만 넣어주세요)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[위 생략]</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">    var userFirstName = inputUser.profile.firstName;</div><div class="line">    var userLastName = inputUser.profile.lastName;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    // 회원가입 입력값 검증 시작</div><div class="line">    try</div><div class="line">    &#123;</div><div class="line">      NotEmptyString(userEmail);</div><div class="line">      NotEmptyString(userPassword);</div><div class="line">      NotEmptyString(userPasswordAgain);</div><div class="line">      NotEmptyString(userFirstName);</div><div class="line">      NotEmptyString(userLastName);</div><div class="line">      isEmail(userEmail);</div><div class="line">      isValidPassword(userPassword);</div><div class="line">      isMatchPassword(userPassword, userPasswordAgain);</div><div class="line">    &#125;</div><div class="line">    catch (err)</div><div class="line">    &#123;</div><div class="line">      throw err;</div><div class="line">    &#125;</div><div class="line">    // 회원가입 입력값 검증 종료</div><div class="line">  </div><div class="line">  </div><div class="line">    // 회원가입 시작</div><div class="line">    try</div><div class="line">    &#123;</div><div class="line">      Accounts.createUser(&#123;</div><div class="line">        username: userEmail,</div><div class="line">        email: userEmail,</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">[아래 생략]</div></pre></td></tr></table></figure>
<p>소스에 대해 설명을 조금 하면, 기본적으로 try,catch문을 만들고 try 안에 미리 작성해둔 검증문과 이 검증문을 어떤 input값에 대응하게 할지를 정하는 과정입니다. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try</div><div class="line">&#123;</div><div class="line">  검증구문</div><div class="line">&#125;</div><div class="line">catch(err)</div><div class="line">&#123;</div><div class="line">  오류 발생시 메시지 발생</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이제 위의 값들을 다 메칭해 주셨으면, 테스트를 해보도록 하겠습니다.<br>일단 모든 값은 무조건 입력해야 하므로, NotEmptyString를 사용해고, 이메일은 이메일 형식이 있으면, <code>isEamil</code>을 사용해고, 패워드는 기본 길이와, 패스워드&amp;패스워드확인이 같은지를 체크하는 부분을 추가해습니다. </p>
<p>이제 localhost:3000/register 를 실행시켜 보고, 검증이 잘 진행되는 확인해 보도록 하겠습니다. 만약 검증부분이 정상적으로 입력되었다면, 아무것도 입력하지 않거나,이메일 형식이 틀리는 문제 등이 발생시, 아래와 같이 경고창이 뜨고 더이상 진행이 안되는 상태가 됩니다. </p>
<p><img src="https://lh3.googleusercontent.com/HjMmkYqb3WroN_ImSg6Qu9icIhmO8JyPNm7-v71VG0L-Fz2g9F6Ew0BeBNEed3HdXHWlpeD4TmpVJs-9nDKRaNs3lwVvY3TKg87JphA1OvtaP_XCOg-W7s1pVbyOqaZjGGAvQIpA0-4h9xVyj1PGLM-7eUCREyGhSUDfEFLp2dVTAZO5vOFZfZMWXVVw8xNt4FBupFTeV2ugdukwCtzmQrN_8OqqdtdsTcp2VmBYni_eO_O8Eftl6a2_CcO_lvwCj2aNWEfgwUyW3ULmSrwg4qHYQYWmpt4IHbgPNF7lecVx00tmvCq2-JqLpr6KxP-c_EmIMULJH7lWF881G53quswBgUUSeTT72P71rEIQQJqcFF8fHLAFOMcmn55ZvQz2et1pzMKh9-xpsH3aDZoLyYRTlKKW9rybFikEBbUBdqbFh3ahb-6jtn3BrJkPY1jO-SyA7kmXxakFHgE1qV5Hdu__OEMimq5fg3015iaP3S9_5o8aGuCxd-E60bEp5txXUBjZpD9CoLHXKNByOqUk2FqhhPg7us1HuTpGVaH5LlqDSxQPJgUCHZaWKlzJ3ay-90kHB96M5bNQEpehAro40dUyFfUxYGh3yeIM3nsHR9nuXcPDh_qcWfzhAk0O-yw9UG5tQwJM_1vQba0bTffmF9yWcqJ-r-zPVYTWZUcD_Nw=w1087-h746-no"></p>
<p>이 내용을 바탕으로 기존 로그인 화면도 검증 및 경고창을 추가해 보도록 하겠습니다. 아래 소스를 바탕으로 <code>검증추가</code> 부분을 추가해주세요.</p>
<p><code>client/login.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[위 생략]</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">    var inputEmail = tmpl.find(&apos;input[name=user-email]&apos;).value;</div><div class="line">    var inputPwd = tmpl.find(&apos;input[name=user-pwasword]&apos;).value;</div><div class="line">    </div><div class="line">    // 검증추가 시작</div><div class="line">    try</div><div class="line">    &#123;</div><div class="line">      NotEmptyString(inputEmail);</div><div class="line">      NotEmptyString(inputPwd);</div><div class="line">    &#125;</div><div class="line">    catch(err)</div><div class="line">    &#123;</div><div class="line">      console.log(err);</div><div class="line">      //Bert.alert( err.message , &apos;danger&apos;, &apos;growl-top-right&apos; );</div><div class="line"></div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    // 검증추가 종료 </div><div class="line">    </div><div class="line">    Meteor.loginWithPassword(inputEmail, inputPwd, function(err) </div><div class="line">    &#123;</div><div class="line">      if(!err)</div><div class="line">      &#123;</div><div class="line">        FlowRouter.go(&apos;/&apos;);</div><div class="line">      &#125;</div><div class="line">  .</div><div class="line">  .</div><div class="line">  .</div><div class="line">  [아래 생략]</div></pre></td></tr></table></figure>
<p>회원가입과 로그인에서의 <code>유효성검사</code>에서 다른 점이 있습니다. 바로 회원가입은 서버쪽에서 검사을 했고, 로그인 페이지는 클라이언트에서 실행되도록 한것입니다. 즉 <code>유효성검사</code>는 서버나 클라이언트 어디서든 사용할 수 있다는 얘기가 됩니다. 상황에 따라 사용할 수 있고, 아주 중요한 내용이라면, 서버&amp;클라이언트 모두에서 유효성검사를 할 수 있습니다. 그리고 이 두 경우 모두 <code>lib/checkPattren.js</code> 를 참조해서 이용할 수 있다는 점이 Meteor의 매력중 하나가 아닐까 생각합니다. ^^ </p>
<hr>
<h4 id="4-4-이메일-인증"><a href="#4-4-이메일-인증" class="headerlink" title="4.4 이메일 인증"></a>4.4 이메일 인증</h4><p>가입시 자동가입 등을 막는 방법으로 많이 사용되는 방법으로 이메일 인증이 있을 것입니다. Meteor는 이에 필요한 API를 나름 잘 제공하고 있습니다.</p>
<p>우선 첫번째로 할 일은 인증시에 보낼 메일에 대한 설정부터 해보겠습니다. 다음 소스를 해당경로에 파일을 만들고 입력해주세요.</p>
<p><code>server/main.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// Set up login services</div><div class="line">Meteor.startup(function() &#123;</div><div class="line"></div><div class="line">  Accounts.config(&#123;</div><div class="line">    sendVerificationEmail: true</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  process.env.MAIL_URL=&quot;smtps://이메일주소:패스워드@smtp.gmail.com:465/&quot;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>위 소스에서<br><code>Meteor.startup</code> 의 경우 meteor가 실행될 때 초기에 필요한 세팅등을 실행시키는 부분이 되겠습니다. 여기서는 보내는 메일에 대한 정보(smtp 에 대한 정보)를 입력해 주시면 되는데 smtp의 경우 메일 서비스 마다 조금 다른 부분이 이을 수 있으니 꼭 엽력하기 전에 해당 smtp 서비스의 입력방법을 확인해주세요.<br>참고로 현재 버전(1.5)에서 gmail의 경우 <code>smtp</code>가 아닌 위와 같이 <code>smtps</code>로 해야 메일이 정상적으로 발송됩니다.<br>Accounts.config 부분의 <code>sendVerificationEmail: true</code> 만 주면 메일로 확인을 해야만 가입승인이 떨어지는 구조가 되고, 자동으로 메일을 발송합니다. 하지만 메일의 경우 영어로 된 기본 메일이 발송되므로 아래 소스를 참고로 친절한 한글 메일을 만들 수 있습니다. ^^</p>
<p><code>server/accountsMails.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// 공통사항</div><div class="line">Accounts.emailTemplates.siteName = &quot;account sample&quot;;</div><div class="line">Accounts.emailTemplates.from     = &quot;admin &lt;admin@gmail.com&gt;&quot;; // 보내는 주소 정보</div><div class="line"></div><div class="line">// 가입확인 메일</div><div class="line">Accounts.emailTemplates.verifyEmail = &#123;</div><div class="line">  subject() &#123;</div><div class="line">    return &quot;Meteor accounts 가입확인 메일&quot;;</div><div class="line">  &#125;,</div><div class="line">  text( user, url ) &#123;</div><div class="line"></div><div class="line">    let emailAddress   = user.username,</div><div class="line">      urlWithoutHash = url.replace( &apos;#/&apos;, &apos;&apos; ),</div><div class="line">      supportEmail   = &quot;메일아이디@gmail.com&quot;,</div><div class="line">      emailBody      = `이메일 주소를 확인하려면 ($&#123;emailAddress&#125;) 다음 링크를 방문하십시오. \n\n link: $&#123;urlWithoutHash&#125; \n\n 만약 확인을 요청하지 않은 경우, 이 이메일을 무시하십시오. 문제가 있다고 생각되면 다음 서비스 지원팀에 문의하십시오. \n\n 문의주소 : $&#123;supportEmail&#125;.`;</div><div class="line"></div><div class="line">    console.log(&apos;mailUser&apos;);</div><div class="line">    console.log(user);</div><div class="line"></div><div class="line">    return emailBody;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>위 소스에서 공통부분은 가입인증 말고도 메일 보내는 다른 메일 서비스에서 계속해서 사용하게 될 부분으로, 사이트명과 보내는 사람의 이메일 주소를 설정하는 부분입니다. </p>
<p>다음으로 실제 가입확인 메일에 관한 부분을 조금 설명드리겠습니다.<br><code>supportEmail=user.username</code>으로 세팅된 이유는 기본적으로 username을 email로 세팅하기 때문이다<br>emailBody는 메일 내용에 관한 부분입니다. 제일 중요한 부분은 <code>${urlWithoutHash}</code> 입니다. 이 링크는 일종의 일회성 키값으로 해당 링크로 방문을 해야 가입승인이 활성화 됩니다.</p>
<p>다음은 이런 실제 메일을 보내는 method를 추가해보겠습니다.<br>아래 소스를 참고로 <code>sendVerificationLink</code>(가입 확인 메일 발송) 메소드를 추가해주세요.</p>
<p><code>server/accounts.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Meteor.methods(&#123;</div><div class="line"></div><div class="line"></div><div class="line">  register: function(data) // 서버측에서 회원가입 실행시 사용됨.</div><div class="line">  &#123;</div><div class="line"></div><div class="line">    // 서버에서 한번 더 입력값 검증을 해도 된다. 아니면 모든 입력값 검증을 서버로 옮겨 와도 상관은 없다.</div><div class="line">    try</div><div class="line">    &#123;</div><div class="line">      NotEmptyString(data.username);</div><div class="line">      NotEmptyString(data.password);</div><div class="line">      isEmail(data.username);</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">[중략]</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">    &#125;</div><div class="line">    catch (err)</div><div class="line">    &#123;</div><div class="line">      throw err;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  // 가입 확인 메일 발송</div><div class="line">  sendVerificationLink(user)</div><div class="line">  &#123;</div><div class="line">    var userId = user;</div><div class="line">    if ( userId ) &#123;</div><div class="line">      return Accounts.sendVerificationEmail( userId );</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>이제 가입이 이루어질 타이밍에 <code>sendVerificationLink</code> 메소드를 호출하는 작업을 해보겠습니다. 같은  <code>server/accounts.js</code>에 <code>Accounts.onCreateUser()</code>라는 일종의 라이프 사이클 API를 이용하면 되겠는데요. 즉 createUser api로 유저가 생성될 때 어떤 일들을 함께 처리할지를 정하는 함수라고 보면 되겠습니다.<br><code>onCreateUser</code>로 해야하는 일은 user.profile에 넣어줄 값 싱크, 메일 발송, 그리고 이후에 할 외부 api(facebook, google 등)를 이용한 로그인 시 profile 싱크 맞추는 작업 등이 있겠습니다. 아래 소스를 참고로 accounts.js 파일을 작성해주세요. 다시 한번 말씀드리자면 회원의 다양한 정보(성별, 주소 등등)를 user.profile에 넣어두고 사용할 수 있습니다. </p>
<p><code>server/accounts.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Meteor.methods(&#123;</div><div class="line"></div><div class="line"></div><div class="line">  register: function(data) // 서버측에서 회원가입 실행시 사용됨.</div><div class="line">  &#123;</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">[중략]</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 가입시 메일 발송</div><div class="line">Accounts.onCreateUser(function (options, user) &#123;</div><div class="line"></div><div class="line">  user.profile = options.profile; // 이렇게 안해주면 profile이 없는 상태로 가입됨...</div><div class="line"></div><div class="line">  Meteor.setTimeout(function() &#123; // setTimeout을 걸어주지 않으면 메일 발송이 안됨</div><div class="line"></div><div class="line">    Meteor.call(&apos;sendVerificationLink&apos;, user._id, function (err)</div><div class="line">    &#123;</div><div class="line">      if (err)</div><div class="line">      &#123;</div><div class="line">        throw error.reason;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">  &#125;, 2 * 1000);</div><div class="line"></div><div class="line">  return user;  // 꼭 새 사용자 객체를 반환해야 함.(가이드에 나와있는 내용임)</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>다음으로 라우터에 해당 이메일로 보냈던 확인 주소로 접근할 경우 키 값이 맞는지 확인 하는 부분을 추가해야 한다. 메일로 보낸 링크가 정상적이라면, 링크를 클릭한 주소로 접속하는 순간 회원가입이 완료되는 방식이 되겠습니다. 참고로 위의 소스에서 <code>sendVerificationLink</code> 호출시 <code>Meteor.setTime()</code>로 감싸주지 않으면 오류가 발생합니다. </p>
<p><code>lib/routes.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[위 중략]</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line"></div><div class="line">        content: &apos;changePassword&apos;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">      FlowRouter.go(&apos;/&apos;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//이메일 인증 관련</div><div class="line">FlowRouter.route( &apos;/verify-email/:token&apos;, &#123;</div><div class="line">  name: &apos;verify-email&apos;,</div><div class="line">  action( params )</div><div class="line">  &#123;</div><div class="line">    Accounts.verifyEmail( params.token, ( error ) =&gt; &#123;</div><div class="line">      if ( error )</div><div class="line">      &#123;</div><div class="line">        Bert.alert( error.reason, &apos;danger&apos; );</div><div class="line">      &#125;</div><div class="line">      else</div><div class="line">      &#123;</div><div class="line">        FlowRouter.go( &apos;/&apos; );</div><div class="line">        Bert.alert( &apos;이메일 인증에 성공했습니다.&apos;, &apos;success&apos; );</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>Accounts.verifyEmail</code> API를 이용해서 메일을 통한 링크 접근 값이 정상적일 경우 회원가입이 정상적으로 처리되도록 합니다.</p>
<p>다음으로 로그인 후 첫 화면에서 회원 가입이 진행중일 경우(이메일 인증을 아직 받지 않은 상태)에는 유저 정보를 보여주는 것이 아닌 아직 메일에서 가입승인을 하지 않았다는 메시지를 보여주는 부분을 추가하도록 하겠습니다. </p>
<p><code>client/home.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;template name=&quot;userInfo&quot;&gt;</div><div class="line">  </div><div class="line">  &#123;&#123;#unless currentUser.emails.[0].verified&#125;&#125;</div><div class="line">    &lt;div class=&quot;panel panel-default col-md-6 col-md-offset-3  panel-custom&quot;&gt;</div><div class="line">      &lt;div class=&quot;panel-heading text_center&quot;&gt;</div><div class="line">        &lt;h2&gt;METEOR ACCOUNTS&lt;/h2&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;panel-body panel-body-set&quot;&gt;</div><div class="line"></div><div class="line">        &lt;div class=&quot;col-xs-12 panel-body-inner-box-4&quot;&gt;</div><div class="line">          &lt;h3&gt;확인 메시지&lt;/h3&gt;</div><div class="line">          &lt;p&gt;가입하신 이메일로 가입승인을 해주셔야 사용이 가능합니다.&lt;/p&gt;</div><div class="line">          &lt;p&gt;메일이 오지 않으셨다면 메일을 재발송 해주세요.&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;form class=&quot;col-md-12 panel-body-inner-1&quot;&gt;</div><div class="line">          &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">            &lt;input type=&quot;text&quot; class=&quot;form-control account-text-form-1&quot; placeholder=&quot;가입 이메일&quot;&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">        &lt;div class=&quot;form-group panel-body-inner bottom-padding&quot;&gt;</div><div class="line">          &lt;button name=&quot;resend-verification-link&quot; class=&quot;btn btn-danger btn-lg btn-block button&quot;&gt;메일 재발송&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line"></div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &#123;&#123;else&#125;&#125;</div><div class="line">    &lt;div class=&quot;panel panel-default col-md-6 col-md-offset-3  panel-custom&quot;&gt;</div><div class="line">      &lt;div class=&quot;panel-heading text_center&quot;&gt;</div><div class="line">        &lt;h2&gt;METEOR ACCOUNTS&lt;/h2&gt;</div><div class="line">        &lt;p&gt;가입유저 정보&lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;panel-body panel-body-set&quot;&gt;</div><div class="line"></div><div class="line">        &lt;div class=&quot;col-xs-12 panel-body-inner-box-3&quot;&gt;</div><div class="line">          &lt;p&gt;Email: &#123;&#123;currentUser.username&#125;&#125; &lt;/p&gt;</div><div class="line">          &lt;hr/&gt;</div><div class="line">          &lt;p&gt;First Name: &#123;&#123;currentUser.profile.firstName&#125;&#125; &lt;/p&gt;</div><div class="line">          &lt;hr/&gt;</div><div class="line">          &lt;p&gt;Last Name: &#123;&#123;currentUser.profile.lastName&#125;&#125; &lt;/p&gt;</div><div class="line">          &lt;hr/&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line"></div><div class="line">        &lt;div class=&quot;form-group panel-body-inner bottom-padding&quot;&gt;</div><div class="line"></div><div class="line">          &lt;button name=&quot;btn-logout&quot; class=&quot;btn btn-danger btn-lg btn-block button&quot;&gt;로그아웃&lt;/button&gt;</div><div class="line">          &lt;a href=&quot;&#123;&#123;pathFor &apos;changePassword&apos;&#125;&#125;&quot; class=&quot;a-right&quot; &gt;비밀번호 변경&lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line"></div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &#123;&#123;/unless&#125;&#125;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>위의 내용중에 <code>확인 메시지</code> 페이지의 경우 회원가입만 되어 있고, 메일로 확인을 하지 않았을 때 보여지는 화면인데요. 이 경우 메일 발송이 잘 못 이루어 졌을 수도 있어, 이럴 경우 다시한번 메일을 발송하는 input 박스를 만들어 두는 두는 장치를 추가한 부분이 되겠습니다. </p>
<p><img src="https://lh3.googleusercontent.com/SiPWE2nGbL86uW4pthuNxwFlgdp1xIbMTSw7Ec4DyXgz5tWVa4ZJ5GdkzLTP4AVSlZFAsyxMM4jkxm0xEi-ql9n5xV4tZAihv05Orn245_OYs1QhKVAWjGUaT55qLYn7M8YnBn5bvo6BjM9TRHN6ooeIixne8JPWVadudca7MQ2G2W2bhi6RyuejwWKesV9aOKicKoAnkoJIJMBvX4jemBVASRbA3kMhx5yP0i-DXYs9H6DYRnWhd5Ns2Vf0p-NIcYoN3ZZ7G4cJKKqfpI7mmJDenZLrNYETfbn0aK52Fzy6ScNlOET_EdffjaP10tI_L20Qku4xdOrTtX33M7I9FRLWolDDO-q5BzK9NIt2W5LIsi9k0D-KC_bN8Q861bPcK6fUp4MeTj81AF3-kOpuY3nBQsF3T5VLOLcMxDRsYJiyLEFlvtO2vhWBgo63AMIoUQrtecmdOGAWgJQqf-oZQaQaXNKVtF5wkEQTD4Jfyeqji8xJUgtg_x0DaIRifcdlz9XQ_ATsleR1yFC7W37uFkPWADFlyH8tXfiN2TXqJUJqEt30qbH5Prsy9-1ARvYi2WCGgKwmKPoOXoGJZr_YdXuFoXs9Je3E8ncvBBADzTo4YxqGgjnBJAIGDM69sisHsm_Pcrh_NtQ2ncVn4QYy7LvgjXe8gbhxS_U5zLdzBLk=w619-h441-no"></p><p style="text-align: center;">[home.html 페이지 - 회원가입 확인 페이지]</p><p></p>
<p><code>home.html</code> 은 총 3가지의 상황에 따른 화면을 나타냅니다. 위의 회원가입 확인 페이지와 함께 다음 2페이지가 상황에 따라서 나타나가 됩니다. </p>
<p><img src="https://lh3.googleusercontent.com/1W9MK5V3JUqstBrDbh-xqxpQ4SamNR8dPpfmZTcgdRk3z-fwYA4ix-yTzwrPv0TdMR4Aaisl6s3pCsHZONin7bb6Dctb0ra0D6pm-Qky20Uc_FFLLVQtaegdazpy_gJEaUcw7OxRpClgLBsgbfYK55TwGmHDWd7O6GScNXSVqldin90a38Ls0NseKKKDIVtcMGpm1nZT6o8X4nGhFiOYpSeeqUccJ4E2xxBVOoi4cIrZxHRWobhMhszC78wqHvltLRp9lWUYGCaFlH2qTrTba6UZAWYeovWHW8zfOcpoXal3iuwDV6i0iLDhBZ701G_Da2wfQagOofEjKvgLqtrfm2P5vxgAa06w9kaAQRbY92teH0J6rnOO7GncGMU6h8jONS1BnBxGJqiYIllKFG_-Vng7ra2SZ4vb1OuXEgjuuosJNpvgHJu16-hekbQs73srGgzqrpbmfYERFfk4SxwmmLMwfF9e41ThBgujhZiW-CcgY2AUCKgt6314W1xFprRs9mr_RDV1ahTk1vdlZhgbyDPyfkiAtNN86O39m7-ylNB3Kztzk0pNbU31Y1SH-3Z43J8C0ilcF4blhJjVnGAJU9tl3sXJa0NbQfm_4rcEXx2JY8flpPZcUIty3iz5BPSAE1sP_g6ahYTAAdQD1kJrS0uDF_vbSySZw_y7DCS4MdA=w727-h364-no"></p><p style="text-align: center;">[home.html 페이지 - 로그 아웃 상태일 때의 페이지]</p><p></p>
<p><img src="https://lh3.googleusercontent.com/TNqGkV0ZOW2480t4GBUaEOEA056ZaYC8tuKAvOWrR5hM6hE3mJeVAX8N9OXkrctqWtDVZPhw70lCGG_0P8ZpZ8fAzA9_cJRaPwW9YUsA8I5CYNlkMRjKBZH6diankWsOCn8rERZGeSYKmoiqgwIZ0LJlS2TraZeGrnDn_cavvnDXTsUoh8UBACUahRHQVQbe4tLsNFs6Kzhe8KN4psRKxzfJGoibVC1nME47rj7ZmtwIQXl5kRlwnBwK7Bw1oSzNkgbsfmumrRc8mfH3JokNQlriiYXXVAN7QBSy3XaNF3sdpiyNFGQtS5iR38OaNL8fnIIRMFz8hvXdKISPtYXO2odMq0usWHmDP1aXUGrfA2QcP79IzOxDkmAq-cFXa6yK9GJNcTEnIaDiJhPfPEKroMrmlfqQBY8kdUf256YFReOHnO49rNdm9h7lqhe9T9o17Ld1wKQlqmkf3-9Y8lvfS63yJXlG0Dx0xKM7o1mOs-Bw8dPUnNPgQWfVCFVc379QoNYzHldSGRfOtL_gH0cDnUVGCaOPf1NrU4UXI5N5guf-NQ24XKGiF7AyoU1g-En6HuO_ZMLTcetsqG041GMtDE_Vw1o7PKtbtGlxlsrkq89kx3_G3fnQ0_rghqJbwfFachWVwEktpQbtJxlFkbN-kj0QXrzDFDBT_RB7PVvp22g=w627-h477-no"></p><p style="text-align: center;">[home.html 페이지 - 회원가입 확인 후 로그인 페이지]</p><p></p>
<p>여기서 잠깐 meteor에서의 회원가입 과정을 조금 설명드리겠습니다. meteor로 <code>Accounts.createUser()</code>로 회원가입이 진행되면, 데이터베이스 user collection(meteor는 기본적으로 mongodb를 사용합니다.)에 다음과 같은 json 필드가 추가됩니다. 각 컬럼은 다음과 같은 성격을 가집니다. 기본정보 이외의 사이트마다 등록이 필요한 값들은 profile 필드 아래에 넣어두고 사용할 수 있습니다.</p>
<ul>
<li>_id : 고유값</li>
<li>createdAt : 생성날짜</li>
<li>services/password : 비밀번호(자동으로 암호화)</li>
<li>username: 가입아이디(기본적으로 가입 이메일을 사용)</li>
<li>emails/address : 가입한 이메일 주소</li>
<li>emails/verified : 가입확인 유무(기본 false로 이메일 가입확인에 사용)</li>
<li>profile: 기타 가입 정보(사용자가 임의로 추가하는 필드의 경우 이 아래에 두고 사용하면 됨.)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;_id&quot; : &quot;gKdDPzkLRjcbAwnG5&quot;,</div><div class="line">    &quot;createdAt&quot; : ISODate(&quot;2017-05-27T15:13:55.357Z&quot;),</div><div class="line">    &quot;services&quot; : &#123;</div><div class="line">        &quot;password&quot; : &#123;</div><div class="line">            &quot;bcrypt&quot; : &quot;$2a$10$og01yOey9To/ugGr8uxBbe1nCqKZ30qCzikh88OJi4KY9Vj3Qm7xO&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;username&quot; : &quot;freeseamew@gmail.com&quot;,</div><div class="line">    &quot;emails&quot; : [ </div><div class="line">        &#123;</div><div class="line">            &quot;address&quot; : &quot;freeseamew@gmail.com&quot;,</div><div class="line">            &quot;verified&quot; : false // 이 부분을 통해 이메일 인증 확인 가능</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    &quot;profile&quot; : &#123;</div><div class="line">        &quot;serviceType&quot; : &quot;site&quot;,</div><div class="line">        &quot;firstName&quot; : &quot;가입자 이름&quot;,</div><div class="line">        &quot;lastName&quot; : &quot;가입자 성&quot;,</div><div class="line">        &quot;gender&quot; : &quot;&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이를 참고로 위의 <code>home.html</code> 페이지가 상황에 따라서 화면을 보여주는 원리는 다음과 같습니다. </p>
<p><code>#unless loggingIn</code> 로 먼저 로그인 상태를 확인 한 다음에 로그인 되어 있으면, <code>#unless currentUser.emails.[0].verified</code>를 참고하여 <code>verified</code>가 true이면 로그인 이용자의 정보를 보여주고, false일 경우에는 <code>회원가입 확인 페이지</code>를 보여주는 구성을 가지게 됩니다. </p>
<hr>
<h3 id="5-회원가입시-사용자-정의-가입정보-추가-방법"><a href="#5-회원가입시-사용자-정의-가입정보-추가-방법" class="headerlink" title="5. 회원가입시 사용자 정의 가입정보 추가 방법"></a>5. 회원가입시 사용자 정의 가입정보 추가 방법</h3><p>위에서 설명 했지만 기본적인 가입 시스템을 만들면, _id, createAt, username, emails와 같은 최소한의 정보는 기본적으로 저장합니다. 하지만 그외의 정보(성별, 사용자이름, 레벨, 주소 등)는 profile이라는 필드 아래에 넣어서 사용 할 수 있습니다. 사실 위에서도 이미 그 부분에 대해서 조금 설명을 드렸지만, 조금 더 이 부분에 대해서만 다시한번 설명 드리도록 하겠습니다. </p>
<p>register.html에서 폼 값 등으로 정의된 값은 register.js의 registerInfo라는 객체에 저장된 후 register 메소드로 전달됩니다. 이 때 필요한 값들을 profile아래에 정의해서 넘기면 됩니다. </p>
<p><code>client/register.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> var registerInfo = &#123;</div><div class="line">    username: inputUsername,</div><div class="line">    email: inputEmail,</div><div class="line">    password: inputPassword,</div><div class="line">    profile: &#123; // 사용자 정의 가입정보</div><div class="line">      firstName: inputFirstName,</div><div class="line">      lastName: inputLastName</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  //서버로의 로그인 호출</div><div class="line">  Meteor.call(&apos;register&apos;, registerInfo, function (err)</div><div class="line">  &#123;</div><div class="line">    if(!err)</div><div class="line">    &#123;</div><div class="line">      Bert.alert( &apos;가입에 성공했습니다. 가입한 메일로 인증을 받아주세요&apos; , &apos;danger&apos;, &apos;growl-top-right&apos; );</div><div class="line">      FlowRouter.go(&apos;/login&apos;);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">      Bert.alert( err.message , &apos;danger&apos;, &apos;growl-top-right&apos; );</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이를 <code>server/accounts.js&#39;의</code>register` 메소드에서 다시 받게 됩니다.  그리고 ‘Accounts.createUser()’에 받은 값들을 넘깁니다. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Meteor.methods(&#123;</div><div class="line"></div><div class="line">  register: function(data) // 서버측에서 회원가입 실행시 사용됨.</div><div class="line">  &#123;</div><div class="line"></div><div class="line">&apos;</div><div class="line">&apos;</div><div class="line">&apos;</div><div class="line">[중략]</div><div class="line">&apos;</div><div class="line">&apos;</div><div class="line">&apos;</div><div class="line">    // 회원가입 시작</div><div class="line">    try</div><div class="line">    &#123;</div><div class="line">      user = Accounts.createUser(&#123;</div><div class="line">        username: data.username,</div><div class="line">        email: data.email,</div><div class="line">        password: data.password,</div><div class="line">        profile:&#123;</div><div class="line">          serviceType: &apos;site&apos;,</div><div class="line">          firstName: data.profile.firstName,</div><div class="line">          lastName: data.profile.lastName,</div><div class="line">          gender: &apos;&apos;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      return &#123;</div><div class="line">        &quot;userId&quot;: user</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    catch (err)</div><div class="line">    &#123;</div><div class="line">      throw err;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>마지막으로 <code>Accounts.onCreate()</code> api를 사용하여 위의 값이 저장될 때 다시한번, 사용자 정의 값이 어디에 저장될 지 지정해 주면 됩니다. 참고로, profile값들은 options.profile에 들어가 있고, 아래와 같이 설정하면 정상적으로 몽고디비의 user collection의 가입자의 profile에 저장됩니다. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Accounts.onCreateUser(function (options, user) </div><div class="line">&#123;</div><div class="line"></div><div class="line">  user.profile = options.profile;// 이렇게 안해주면 profile이 없는 상태로 가입됨...</div><div class="line"></div><div class="line"></div><div class="line">[아래 생략]</div><div class="line">.</div><div class="line">.</div><div class="line">.</div></pre></td></tr></table></figure>
<p>머 회원가입 과정은 대략 이렇습니다. 제 설명으로 조금이나마 이 과정이 이해가 되었으면 좋겠지만, 그렇지 않다면, 그냥 이렇게 가입이 되고 로그인이 된다로 이해하고 넘어가 주셔도 될 것 같습니다. 제가 강좌를 처음 쓰는 것이라, 여러 설명이 조금 매끄럽지 못한점은 양해 부탁드립니다. ㅡㅜ</p>
<p>그럼 다음 강좌도 계속 봐주세요 ^^</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;4-회원가입-기본&quot;&gt;&lt;a href=&quot;#4-회원가입-기본&quot; class=&quot;headerlink&quot; title=&quot;4. 회원가입 기본&quot;&gt;&lt;/a&gt;4. 회원가입 기본&lt;/h3&gt;&lt;p&gt;저번 강좌를 통해 기본적인 페이지 디자인과 페이지 이동(routing) 
    
    </summary>
    
    
      <category term="meteor, custom account, 미티어" scheme="http://freeseamew.github.io/tags/meteor-custom-account-%EB%AF%B8%ED%8B%B0%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>Meteor custom account 강좌 1</title>
    <link href="http://freeseamew.github.io/2017/07/02/meteor-account-tutorial-1/"/>
    <id>http://freeseamew.github.io/2017/07/02/meteor-account-tutorial-1/</id>
    <published>2017-07-01T15:40:32.000Z</published>
    <updated>2017-07-03T09:38:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0-강과소개"><a href="#0-강과소개" class="headerlink" title="0. 강과소개"></a>0. 강과소개</h3><p>풀스택 플랫폼인 meteor는 기본적으로 account(로그인, 회원가입 등)에 대해서도 간단한 태그 하나로 구현할 수 있도록 기능을 제공하고 있습니다. 하지만 실제 프로젝트에서는 이 기본 기능 이외에 사이트에 맞게 account를 수정해야 할 경우가 종종 발생할 것입니다. 이 강좌는 이런 account에 대한 사용자 정의 작성에 대한 강좌가 되겠습니다.<br>이 강좌에서 meteor에 대한 기본 설명을 모두 하기는 어렵겠지만 필요한 부분에 대해서는 간단하게 추가 설명을 해보도록 하겠습니다.</p>
<p>기본적으로 이 강좌에서 다룰 Meteor의 account 기능으로는 <code>회원가입</code>, <code>로그인</code>, <code>이메일 인증</code>, <code>비밀번호 분실 변경메일 보내기</code>, <code>소셜 로그인</code> 이 되겠습니다. 사실 이메일을 통한 회원 인증만 하더라고 구현하기 위해서는 꽤 노력이 필요하고, 소셜 로그인(facebook, twiter, google, kakao)의 경우는 지금은 많은 사이트에서 기본으로 사용하는 기능이지만 막상 구현해 보려고 하면 이것도 꽤 삽질?이 필요한 기능인 것을 많은 분들이 공감하실 겁니다. Meteor에서는 이 모든 기능들이 기본 API로 제공되기도 하고, 설치 패키지를 통해 쉽게 구현할 수 있도록 해주고 있습니다. 사실 소셜 로그인 기능만으로도 Meteor를 한번쯤 사용해볼 가치가 있다고 개인적으로는 생각합니다. 자 그럼 본격적으로 강좌를 시작해 보겠습니다. </p>
<blockquote>
<h4 id="강좌에서-다를-내용들"><a href="#강좌에서-다를-내용들" class="headerlink" title="# 강좌에서 다를 내용들"></a># 강좌에서 다를 내용들</h4><ul>
<li>회원가입폼</li>
<li>라우터</li>
<li>validate + method</li>
<li>로그인</li>
<li>비밀번호 찾기</li>
<li>비밀번호 변경</li>
<li>화면전환 + 로딩효과</li>
<li>소셜 로그인 </li>
</ul>
</blockquote>
<hr>
<h3 id="1-설치"><a href="#1-설치" class="headerlink" title="1. 설치"></a>1. 설치</h3><h4 id="1-1-설치-공통"><a href="#1-1-설치-공통" class="headerlink" title="1.1 설치 공통"></a>1.1 설치 공통</h4><blockquote>
<p>meteor.com 에서 os에 맞는 버전의 프로그램을 다운 받습니다.</p>
</blockquote>
<h4 id="1-2-리눅스-amp-맥-os"><a href="#1-2-리눅스-amp-맥-os" class="headerlink" title="1.2 리눅스 &amp; 맥 os"></a>1.2 리눅스 &amp; 맥 os</h4><ul>
<li>mkdir 로 폴더 만든다,</li>
<li>meteor create 프로젝트명</li>
<li>meteor npm install –save bcrypt</li>
<li>meteor npm install</li>
</ul>
<h4 id="1-3-윈도우-대기"><a href="#1-3-윈도우-대기" class="headerlink" title="1.3 윈도우 (대기)"></a>1.3 윈도우 (대기)</h4><p>탐색기에서 폴더 만들고 cmd 창을 열어 해당 폴더로 이동합니다. </p>
<p>: 참고 사이트<br><a href="http://kr.discovermeteor.com/chapters/getting-started/" target="_blank" rel="external">http://kr.discovermeteor.com/chapters/getting-started/</a><br><a href="http://webframeworks.kr/getstarted/meteorjs/" target="_blank" rel="external">http://webframeworks.kr/getstarted/meteorjs/</a></p>
<h4 id="1-4-기본-폴더"><a href="#1-4-기본-폴더" class="headerlink" title="1.4 기본 폴더"></a>1.4 기본 폴더</h4><p>위의 설치가 끝나면, client, server 폴더 내의 설치시 기본적으로 제공되는 파일들은 삭제해 줍니다. </p>
<p>폴더구조에 대해서 간단히 설명해 드리자면, client와 server는 각각 해당 폴더에 들어있는 파일들은 클라이언트측과 서버측에서 호출이 가능한 파일들입니다. 폴더에 넣어 두는 것으로 파일들의 실행위치가 결정됩니다. 그리고 lib 폴더의 경우 이 두곳에서 모두 사용할 필요가 있는 공통 파일들을 넣어두는 곳입니다. </p>
<p>사실 이 방법은 현재 meteor 가이드에서 기본적으로 추천하는 방식은 아닙니다. 현재는 es6 의 기본 문법인 import, export 를 통한 필요한 파일들을 불러오고 내보내는 방식을 추천하고 있습니다. 하지만 예전 방식(폴더별로 넣어두면 자동으로 실행위치에 따라 실행되는)이 갖는 편리함이 있어 개인적으로는 아직까지 예전방식을 주로 사용하고 있습니다. 나중에 es6방식으로도 강좌를 정리해 보도록 하겠습니다. (솔직히 말하면 import, export를 사용하는 방식이 아직 서툽니다. ㅡㅜ )</p>
<p><code># 기본 폴더 구조</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">meteorAccount</div><div class="line">├── .meteor</div><div class="line">├── client</div><div class="line">├── lib</div><div class="line">├── node_module</div><div class="line">└── server</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="2-라우터-설계-url-주소에-따른-화면-전환"><a href="#2-라우터-설계-url-주소에-따른-화면-전환" class="headerlink" title="2. 라우터 설계(url 주소에 따른 화면 전환)"></a>2. 라우터 설계(url 주소에 따른 화면 전환)</h3><p>제일 처음 할 일은, 일단 처음 시작페이를 만들고, 거기서 로그인 또는 회원가입 페이지로의 화면전환 페이지를 만드는 것부터 시작해 보겠습니다. 쉽게 말해 흔히 하는 간단한 라우팅 작업을 해보는 것입니다. </p>
<p>미티어는 기본적으로 router를 제공하고 있지 않지만, 설치 페키지를 통해서 사용자가 router를 선택해 설치할 수 있습니다. 이번 강좌에서는 현재 제일 많이 사용된다고 판단되는 flow-router를 설치 후 사용하도록 하겠습니다. </p>
<p>프로젝트 폴더에서 터미널 또는 cmd창을 열고 아래 <code>설치패키지</code> 관련 명령어를 입력해서 필요한 패키지를 설치하도로록 하겠습니다. </p>
<p>meteor의 경우 다양한 front-end 프레임워크를 지원하는데, 이번 강좌에서는 meteor의 기본 프론트엔드 프레임워크인 blaze를 사용할 것임으로 필요한 blaze-layout도 함께 설치하겠습니다. </p>
<p>참고로 meteor는 <code>meteor add 패키지이름</code> 이런식으로 필요한 패키지를 사용할수 있습니다. 위의 명령어를 프로젝트가 있는 폴더경로의 터미널창에서 입력하시면 됩니다. <code>참고사이트</code>는 meteor에서 사용할 수 있는 컴포넌트를 모아놓은 사이트 입니다. 이 사이트에서 필요한 기능들을 검색해 보시면 많은 기능들이 기본적으로 지원되고 있는 것을 확인 할 수 있을 것입니다. </p>
<blockquote>
<p>설치 패키지</p>
<ul>
<li>meteor add kadira:flow-router</li>
<li>meteor add kadira:blaze-layout</li>
</ul>
<p>: 참고 사이트<br><a href="https://atmospherejs.com/" target="_blank" rel="external">https://atmospherejs.com/</a></p>
</blockquote>
<p>아래 폴더 구조를 참고하여 새로 폴더 및 파일들을 만들어 줍니다.<br>참고로 meteor의 blaze의 경우 template방식으로, 같은 이름의 html, js, css 가 함께 작동하는 구조입니다. login.html에 html구조의 템플릿을 만들고, 여기서 사용할 js 파일의 경우 login.js를 만들어 사용하면 되는 구조가 됩니다. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">meteorAccount</div><div class="line">├── .meteor</div><div class="line">├── client</div><div class="line">│   ├── styles  </div><div class="line">│   │    └── main.css </div><div class="line">│   ├── change-password.html </div><div class="line">│   ├── change-password.js</div><div class="line">│   ├── main-layout.html</div><div class="line">│   ├── main-layout.js </div><div class="line">│   ├── home.html</div><div class="line">│   ├── home.js</div><div class="line">│   ├── login.html </div><div class="line">│   ├── login.js</div><div class="line">│   ├── recover-password.html </div><div class="line">│   ├── recover-password.js</div><div class="line">│   ├── register.html </div><div class="line">│   └── register.js </div><div class="line">├── lib</div><div class="line">│   ├── checkPattern.js </div><div class="line">│   └── routes.js </div><div class="line">├── node_module</div><div class="line">├── public</div><div class="line">└── server</div><div class="line">    ├── accounts.js </div><div class="line">    └── accountsMails.js</div></pre></td></tr></table></figure>
<p>사용할 css 요소를 client/styles/main.css 에 파일을 만들고, 아래 style파일을 복사에 붙여넣기를 사용하여 적용합니다. bootstrap을 기본으로 하고, 조금 수정하여 사용할 예정입니다. bootstrap 역시도 아래를 참고로 패키지를 설치하여 사용 할 수 있습니다. </p>
<blockquote>
<p>설치 패키지</p>
<ul>
<li>meteor add twbs:bootstrap@=3.3.6</li>
</ul>
<p>main.css 소스 링크<br><a href="https://gist.github.com/freeseamew/bf3ce3e1fcc13fa33d26a6a1aaf06379" target="_blank" rel="external">https://gist.github.com/freeseamew/bf3ce3e1fcc13fa33d26a6a1aaf06379</a></p>
</blockquote>
<p>이제 라우터 설정을 해보겠습니다.<br>기본적인 라우터 설정은 아래와 같습니다. 아래 내용을 참고로 해당 위치에 파일을 만들고 소스를 입력해 주시면 됩니다. </p>
<p><code>lib/routes.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">FlowRouter.route(&apos;/&apos;, &#123;</div><div class="line">  name: &apos;home&apos;,</div><div class="line">  action: function() &#123;</div><div class="line">    BlazeLayout.render(&apos;mainLayout&apos;, &#123;</div><div class="line">      content:&apos;home&apos;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">FlowRouter.route(&apos;/login&apos;, &#123;</div><div class="line">  name: &apos;login&apos;,</div><div class="line">  action() &#123;</div><div class="line">    BlazeLayout.render(&apos;mainLayout&apos;, &#123;</div><div class="line">      content: &apos;login&apos;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">FlowRouter.route(&apos;/register&apos;, &#123;</div><div class="line">  name:&apos;register&apos;,</div><div class="line">  action: function() &#123;</div><div class="line">    BlazeLayout.render(&apos;mainLayout&apos;, &#123;</div><div class="line">      content: &apos;register&apos;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>라우터에 대해서 조금 설명 드리면,<br>아래의 내용을 예로 <code>http://localhost:3000/register</code> 주소로 url을 입력하면 <code>regiger</code>라는 template이 <code>mainLayout</code>이라는 곳에 보여 진다는 의미를 가집니다. 다시 설명 하자면, url주소에 따라 home, login, register 등의 페이지로 이동하게 하는 기능을 합니다. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FlowRouter.route(&apos;/register&apos;, &#123; // url 경로</div><div class="line">  name:&apos;register&apos;, // 해당 라이팅 이름</div><div class="line">  action: function() &#123;</div><div class="line">    BlazeLayout.render(&apos;mainLayout&apos;, &#123; // template이 뿌려질 위치 </div><div class="line">      content: &apos;register&apos; // template 이름 </div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>다음은 위에 잠시 설명한 주소에 따라 템플릿을 뿌려줄 일종의 부모 템플릿을 설정하는 파일이 되겠습니다. client/main-layout.js 에 파일을 만들고 내용을 입력해 주세요.</p>
<p><code>main-layout.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;template name=&quot;mainLayout&quot;&gt;</div><div class="line">  &lt;div class=&quot;container&quot;&gt;</div><div class="line">    &#123;&#123;&gt; Template.dynamic template=content &#125;&#125;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>다음으로 아래 소스들은 각각 login.html, register.html 그리고 home.html로 이루어진 기본 페이지가 되겠습니다. </p>
<p>참고로 아래와 같이 <code>pathFor &#39;login&#39;</code> 이렇게 a 태그에 입력해 주면 <a href="http://localhost:3000/login" target="_blank" rel="external">http://localhost:3000/login</a> 처럼 주소에 + 이동할url 형태의 링크 주소를 만들어 주게 되는 문법입니다.  </p>
<p>이 기능을 사용하기 위해서는 아래 패키지가 필요합니다. </p>
<blockquote>
<p>설치 패키지</p>
<ul>
<li>meteor add arillo:flow-router-helpers</li>
</ul>
</blockquote>
<p><code>client/home.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;template name=&quot;home&quot;&gt;</div><div class="line">  &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-md-12&quot;&gt;</div><div class="line">      &lt;div class=&quot;col-md-12&quot;&gt;</div><div class="line">        &lt;h2&gt;환영합니다.&lt;/h2&gt;</div><div class="line">        &lt;hr/&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;col-md-6&quot;&gt;</div><div class="line">        &lt;a href=&quot;&#123;&#123;pathFor &apos;login&apos;&#125;&#125;&quot; class=&quot;btn btn-primary btn-lg btn-block&quot;&gt;Go Login&lt;/a&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;col-md-6&quot;&gt;</div><div class="line">        &lt;a href=&quot;&#123;&#123;pathFor &apos;register&apos;&#125;&#125;&quot; class=&quot;btn btn-success btn-lg btn-block&quot;&gt;Go Register&lt;/a&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p><code>client/register.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;template name=&quot;register&quot;&gt;</div><div class="line">  &lt;h1&gt;Register Page&lt;/h1&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p><code>client/login.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;template name=&quot;login&quot;&gt;</div><div class="line">  &lt;h1&gt;Login page&lt;/h1&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>이제 설정이 완료 되었습니다. 기본 주소인 localhost:3000/ 을 브라우저에 입력하고 화면이 나오는지 확인해 보세요. 그리고 localhost:3000/login , localhost:3000/register 로 주소를 변경해 해당페이지로 잘 이동하는지 확인 보시면 됩니다. </p>
<p><img src="https://lh3.googleusercontent.com/0yllbkf5fFZcn0bBoht3mxG4zkZpQlE_cIfNVKvW7GE2Mi0_x5RKnxqoJbQtSEYjCm5Bp1yLNPPnvCeeRRA4jOugmSVIaEizhe0TH1vSTIUGBwToXJIIRAoZAr8ekmxmnYSTiMLYBbRRwGSreU5hMdYQefcC8oIiY1hO2RynG6sZFD8xuxd1u3An1Y8kJTEyQk3Mli7YxZBoNW648P5LrJxhsgZPxP5bFQSOUDXL_tXBaXuYpJqBCb2rVO27p89VOgfO8VgBrXF8vRKigGvGBmO5oyGcHfe3ELWcdESFQgSj3U_V7wRzFx4QZ00FgOs3W-URZxInesRvF63ZMTwWdVBW49W8_glHFTKikp-nOTxMhJBnImshQKUcTbBuiJduzs3sPqhG6vLhEBn3e_6-ZOmXWPX1qFRFDq95TgBjozhBvNFPJpU_ZWYR8AyE43EnlbT4acjix2XWbaWy3gViExLGspiMTOzi7N3R--SjnHRHwptzym1dQ1O-d3DjdHUooGItgWqgKcQvW08qDkuGmGtVCI18LhzuUdF279bV63lv6P0pLDwAKu0i66uyZx2XSsR48OazYoYX4gAHGira61qfHgtkTsPuECYWApx-TtorWvfPwTr4gQ=w890-h638-no"></p><p style="text-align: center;">[라우팅 화면]</p><p></p>
<hr>
<h3 id="3-회원가입"><a href="#3-회원가입" class="headerlink" title="3. 회원가입"></a>3. 회원가입</h3><p>이제 회원 가입 폼과 로그인 폼을 작성하겠습니다.<br>우선 아래 소스는 로그인 파일입니다. </p>
<p><code>client/login.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;template name=&quot;login&quot;&gt;</div><div class="line"></div><div class="line">  &lt;div class=&quot;container&quot;&gt;</div><div class="line">    &lt;div class=&quot;panel panel-default col-md-6 col-md-offset-3  panel-custom&quot;&gt;</div><div class="line">      &lt;div class=&quot;panel-heading text_center&quot;&gt;</div><div class="line">        &lt;h2&gt;METEOR ACCOUNTS&lt;/h2&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;panel-body panel-body-set&quot;&gt;</div><div class="line">        &lt;span class=&quot;span-or&quot;&gt;or&lt;/span&gt;</div><div class="line">        &lt;div class=&quot;col-xs-12 button-box-1&quot;&gt;</div><div class="line">          &lt;a href=&quot;&#123;&#123;pathFor &apos;register&apos;&#125;&#125;&quot; class=&quot;top-button &quot;&gt;회원가입&lt;/a&gt;</div><div class="line">          &lt;a href=&quot;#null&quot; class=&quot;top-button top-button-selected&quot;&gt;로그인&lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;col-xs-12 button-box-2&quot;&gt;</div><div class="line">          &lt;div class=&quot;col-xs-6 button-box-2-inner button-box-left&quot;&gt;</div><div class="line">            &lt;button name=&quot;facebook&quot; class=&quot;btn btn-primary button-full button-facebook&quot;&gt;facebook&lt;/button&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">          &lt;div class=&quot;col-xs-6 button-box-2-inner button-box-right&quot;&gt;</div><div class="line">            &lt;button name=&quot;google&quot; class=&quot;btn btn-primary button-full button-google&quot;&gt;google&lt;/button&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">          &lt;div class=&quot;col-xs-6 button-box-2-inner button-box-left&quot;&gt;</div><div class="line">            &lt;button name=&quot;twitter&quot; class=&quot;btn btn-primary button-full button-twitter&quot;&gt;twitter&lt;/button&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">          &lt;div class=&quot;col-xs-6 button-box-2-inner button-box-right&quot;&gt;</div><div class="line">            &lt;button name=&quot;kakao&quot; class=&quot;btn btn-primary button-full button-kakao&quot;&gt;kakao&lt;/button&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;form class=&quot;col-md-12 panel-body-inner&quot;&gt;</div><div class="line">          &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">            &lt;input type=&quot;text&quot; name=&quot;user-email&quot; class=&quot;form-control account-text-form-1&quot; placeholder=&quot;가입 이메일&quot;&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">          &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">            &lt;input type=&quot;text&quot; name=&quot;user-pwasword&quot; class=&quot;form-control account-text-form-1&quot; placeholder=&quot;비밀번호&quot;&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">        &lt;div class=&quot;form-group panel-body-inner bottom-padding&quot;&gt;</div><div class="line">          &lt;button name=&quot;btn-singIn&quot; class=&quot;btn btn-success btn-lg btn-block button&quot;&gt;로그인&lt;/button&gt;</div><div class="line">          &lt;a href=&quot;&#123;&#123;pathFor &apos;recover&apos;&#125;&#125;&quot; class=&quot;a-right&quot; &gt;비밀번호 찾기&lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  </div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>로그인 페이지를 입력하고 ‘localhost:3000/login’ 에 접속하면 아래와 같은 화면을 보여줍니다. </p>
<p><img src="https://lh3.googleusercontent.com/OEydsReV1cWjwbaYsdBsSYvB1o6hnHEnHEvR5IxeNuiZiQbURGN3uf8cnRONQalyGtGjqi6-R9cA7al-bhp6A8caALjO9BB-qW-AQ74g079k2rF7uTHYbCec6oUAf1L12MyCWEfCccJ01rZQsuUnL2PK9zE1oNXZiQxCsxLS4xqV_0bmepn4RoK-KpuEDCExMtEj6jDdGup8WPvi9ghEYCeRtI2A65RuRNyk_ZX67kvmkky4DRaLR0AdQdjEwf98lC6Klr1E5druaA2OBvle7MQtCz0iJDMtRGytNi5MTxzdomsghq7CBRjTz_Ny1gGHqff9uufEk_K39c3cOPnUU7W4t_udN9SG4RJ39CKX6n50VgtJjH3kmmND3Czbux_m32KRbZPbh9ipDhMdIsFa8hdaKVPZn6LTyRefU00DvFTg1I48wcwbDJgaOJRvWdcxHP88o_9hTocQJB9HPtGuYw4BuPanYkpXua1LVt7c7kdFtIlsQlnhtQV5MmugJT5zhgtBHjt4XO0XmP0D1deMJ4uhhv5iVFmJQs6o0Vw7x8xMf4gu2IK1ET314GgVa95n-YVHO32Gsv9vhQBYT57qxvswq04mB8JzXEyqbmqjeWHSoG8p7KZ7JgrT1O6NQ25a3YWL_reGXqhgIQyi1Nb7BKjvQdf2gQLIisfUab76sF0=w639-h602-no"></p><p style="text-align: center;">[로그인폼 화면]</p><p></p>
<p>다음은 회원가입폼 관련 소스입니다. </p>
<p><code>client/register.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;template name=&quot;register&quot;&gt;</div><div class="line">  &lt;div class=&quot;panel panel-default col-md-6 col-md-offset-3  panel-custom&quot;&gt;</div><div class="line">    &lt;div class=&quot;panel-heading text_center&quot;&gt;</div><div class="line">      &lt;h2&gt;METEOR ACCOUNTS&lt;/h2&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;panel-body panel-body-set&quot;&gt;</div><div class="line">      &lt;span class=&quot;span-or&quot;&gt;or&lt;/span&gt;</div><div class="line">      &lt;div class=&quot;col-xs-12 button-box-1&quot;&gt;</div><div class="line">        &lt;a href=&quot;#null&quot; class=&quot;top-button top-button-selected&quot;&gt;회원가입&lt;/a&gt;</div><div class="line">        &lt;a href=&quot;&#123;&#123;pathFor &apos;login&apos;&#125;&#125;&quot; class=&quot;top-button&quot;&gt;로그인&lt;/a&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;col-xs-12 button-box-2&quot;&gt;</div><div class="line">        &lt;div class=&quot;col-xs-6 button-box-2-inner button-box-left&quot;&gt;</div><div class="line">          &lt;button name=&quot;facebook&quot; class=&quot;btn btn-primary button-full button-facebook&quot;&gt;facebook&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;col-xs-6 button-box-2-inner button-box-right&quot;&gt;</div><div class="line">          &lt;button class=&quot;btn btn-primary button-full button-google&quot;&gt;google&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;col-xs-6 button-box-2-inner button-box-left&quot;&gt;</div><div class="line">          &lt;button class=&quot;btn btn-primary button-full button-twitter&quot;&gt;twitter&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;col-xs-6 button-box-2-inner button-box-right&quot;&gt;</div><div class="line">          &lt;button name=&quot;kakao&quot; class=&quot;btn btn-primary button-full button-kakao&quot;&gt;kakao&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;form class=&quot;col-xs-12 panel-body-inner&quot;&gt;</div><div class="line">        &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">          &lt;input type=&quot;text&quot; name=&quot;user-email&quot; class=&quot;form-control account-text-form-1&quot; placeholder=&quot;가입 이메일&quot;&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">          &lt;input type=&quot;text&quot; name=&quot;user-password&quot; class=&quot;form-control account-text-form-1&quot; placeholder=&quot;비밀번호&quot;&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">          &lt;input type=&quot;text&quot; name=&quot;user-passwordAgain&quot; class=&quot;form-control account-text-form-1&quot; placeholder=&quot;비밀번호 확인&quot;&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;form-group col-xs-6 panel-body-inner-box-1&quot;&gt;</div><div class="line">          &lt;input type=&quot;text&quot; name=&quot;user-lastName&quot; class=&quot;form-control account-text-form-2&quot; placeholder=&quot;성&quot;&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;form-group col-xs-6 panel-body-inner-box-2&quot;&gt;</div><div class="line">          &lt;input type=&quot;text&quot; name=&quot;user-firstName&quot; class=&quot;form-control account-text-form-2&quot; placeholder=&quot;이름&quot;&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">      &lt;div class=&quot;form-group panel-body-inner bottom-padding&quot;&gt;</div><div class="line">        &lt;button name=&quot;btn-register&quot; class=&quot;btn btn-success btn-lg btn-block button&quot;&gt;가입하기&lt;/button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>회원가입폼 역시 ‘localhost:3000/register’ 에 접속하면 다음과 같은 모습을 보여줍니다. </p>
<p><img src="https://lh3.googleusercontent.com/G3rObdtW8OeRcoJF1hwBjFslttmYxU_ErLXIrU5qtHULOSgaHaMpn-n_rzrwTfUhMs0pzJgLWogUmNOp2fKTpXERta9InsWydVyjq2SYFrY9DVWXMxbAmkcdi_AV6OGij7nB1CtGsMox4L01licd_D3bcJAeNREGViggIaaWcfeElA_Q0uT2Ean-b9GtjU6ffBLzCtsbYVT1tX1NWKbgVDIdaDeEMmhpOtflpgx3x00yxN7DRpxqye4jV9VV4QnDskT0irDUuzUn26-HpnYeg0oUfHU9rNGKSkPT-WCUx2oWNFngklAsZBuBad9bxKY24tS-fN3geI4LbdHU19wCtgFyM71RavARBtr4U5i-Gr2J9C5P2efM6Mk8xFSwy41NbC7gqfRaIKVWV9ZHveRNpoBsXxhvSwDr_PubQTPxR9XMdf6A7tsHZhSAVu3lO44yLg9y5TtIecC2NVprYwWxqitjUygLIzvS_94bdfrrsG4A0LummWDZbpAjaMA28xQr6B5--_dhLrd11NXKOeZk0DmS6-0IgnWtnVySD1cDjyKrraC7QOmVEqf8_gXBMR0JJsLhC4WrXzSVg27P0xTTrDgD6AzzvDalLxY1rs5uc2LRXfyVkRjcHqCtxFx5i3zpyRU23UlZRauwpVRxyMoYsUiip60r8if5vxC4fyKViNM=w631-h714-no"></p><p style="text-align: center;">[회원가입폼 화면]</p><p></p>
<p>자 이렇게 기본적인 account 외형을 다 만들어 봤는데요. 이제 다음 강좌에서는 본격적으로 회원가입, 로그인 등이 실제 작동하도록 만들어 보도록 하겠습니다. </p>
<p>그럼 다음 강좌도 기대해주세요 ^^</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0-강과소개&quot;&gt;&lt;a href=&quot;#0-강과소개&quot; class=&quot;headerlink&quot; title=&quot;0. 강과소개&quot;&gt;&lt;/a&gt;0. 강과소개&lt;/h3&gt;&lt;p&gt;풀스택 플랫폼인 meteor는 기본적으로 account(로그인, 회원가입 등)에 대해서도 간단
    
    </summary>
    
    
      <category term="meteor, custom account, 미티어" scheme="http://freeseamew.github.io/tags/meteor-custom-account-%EB%AF%B8%ED%8B%B0%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://freeseamew.github.io/2017/07/02/hello-world/"/>
    <id>http://freeseamew.github.io/2017/07/02/hello-world/</id>
    <published>2017-07-01T15:05:42.000Z</published>
    <updated>2017-07-01T15:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
